# Generated by Django 3.2.4 on 2021-08-11 17:37

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Gorivo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tip_goriva', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='PoslovnaJedinica',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('naziv', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Preduzece',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('naziv', models.CharField(max_length=100)),
                ('adresa', models.CharField(max_length=100)),
                ('mjesto', models.CharField(max_length=100)),
                ('postanski_broj', models.CharField(max_length=5)),
                ('jib', models.CharField(max_length=13, validators=[django.core.validators.RegexValidator(code='nomatch', message='Duzina mora biti 13 karaktera', regex='^.{13}$')])),
                ('pib', models.CharField(max_length=12, validators=[django.core.validators.RegexValidator(code='nomatch', message='Duzina mora biti 12 karaktera', regex='^.{12}$')])),
                ('telefon', models.CharField(max_length=20)),
                ('fax', models.CharField(max_length=20)),
                ('zracun', models.CharField(max_length=50)),
                ('mail', models.CharField(max_length=50)),
                ('stopa_pdv', models.DecimalField(decimal_places=2, max_digits=2)),
            ],
        ),
        migrations.CreateModel(
            name='VrstaVozila',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vrsta_vozila', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Ugovor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('broj_ugovora', models.IntegerField()),
                ('ime_komitent', models.CharField(max_length=150)),
                ('jib_komitent', models.CharField(max_length=13, validators=[django.core.validators.RegexValidator(code='nomatch', message='Duzina mora biti 13 karaktera', regex='^.{13}$')])),
                ('lk_komitent', models.CharField(max_length=20)),
                ('ulica_komitent', models.CharField(max_length=100)),
                ('grad_komitent', models.CharField(max_length=100)),
                ('ime_kupac', models.CharField(max_length=150)),
                ('jib_kupac', models.CharField(max_length=13, validators=[django.core.validators.RegexValidator(code='nomatch', message='Duzina mora biti 13 karaktera', regex='^.{13}$')])),
                ('lk_kupac', models.CharField(max_length=50)),
                ('ulica_kupac', models.CharField(max_length=100)),
                ('grad_kupac', models.CharField(max_length=100)),
                ('marka_vozila', models.CharField(max_length=100)),
                ('broj_sasije', models.CharField(max_length=50)),
                ('broj_motora', models.CharField(max_length=50)),
                ('godiste', models.IntegerField()),
                ('opis', models.CharField(max_length=50)),
                ('boja', models.CharField(max_length=50)),
                ('zapremina', models.IntegerField()),
                ('snaga', models.CharField(max_length=10)),
                ('nosivost', models.CharField(max_length=10)),
                ('sjedista', models.CharField(max_length=5)),
                ('reg_oznaka', models.CharField(max_length=20)),
                ('cijena', models.FloatField(default=10.0, max_length=10)),
                ('datum', models.DateField(default=django.utils.timezone.now)),
                ('vrijednost_vozila', models.FloatField(max_length=10)),
                ('ugovor_zakljucen', models.BooleanField(default=False)),
                ('napomena', models.CharField(max_length=150)),
                ('masa_vozila', models.CharField(max_length=20)),
                ('storno', models.BooleanField(default=False)),
                ('gorivo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kupoprodaja.gorivo')),
                ('korisnik', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('vrsta_vozila', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kupoprodaja.vrstavozila')),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='poslovna_jedinica',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='kupoprodaja.poslovnajedinica'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
